<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on Kevin&#39;s blog</title>
    <link>https://mkx000.github.io/posts/</link>
    <description>Recent content in Posts on Kevin&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 01 Aug 2023 15:22:27 +0800</lastBuildDate><atom:link href="https://mkx000.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>使用barrier在多台设备间共享鼠标和键盘</title>
      <link>https://mkx000.github.io/posts/%E4%BD%BF%E7%94%A8barrier%E5%9C%A8%E5%A4%9A%E5%8F%B0%E8%AE%BE%E5%A4%87%E9%97%B4%E5%85%B1%E4%BA%AB%E9%BC%A0%E6%A0%87%E5%92%8C%E9%94%AE%E7%9B%98/</link>
      <pubDate>Tue, 01 Aug 2023 15:22:27 +0800</pubDate>
      
      <guid>https://mkx000.github.io/posts/%E4%BD%BF%E7%94%A8barrier%E5%9C%A8%E5%A4%9A%E5%8F%B0%E8%AE%BE%E5%A4%87%E9%97%B4%E5%85%B1%E4%BA%AB%E9%BC%A0%E6%A0%87%E5%92%8C%E9%94%AE%E7%9B%98/</guid>
      <description>介绍 Barrier是一款开源的多平台的鼠标键盘共享软件，可以在多台设备间共享鼠标和键盘，支持Windows、Linux、MacOS等多种操作系统，不同平台(例如一台Windows,一台Linux)的设备也可以共享一套鼠标键盘。
需要注意的是所有设备必须处于同一个局域网内。
安装 Windows Winodws下安装很简单，直接下载这个安装包安装即可。
Linux 各大发行版一般都有对应的包，例如Ubuntu可以直接使用apt安装：
sudo apt install barrier 使用说明 这个软件有两种模式，一种是服务端模式，一种是客户端模式。使用的时候需要一台设备充当服务端，其他的设备充当客户端, 启动服务端之后, 客户端只需要输入服务端的IP地址连接即可, 非常简单。
使用过程中需要注意的点：
0. 作者只尝试过使用Windows作为服务端，Linux作为客户端的情况 这里贴一个官方repo里面某个issue的连接，里面解决了很多问题，可以参考一下： https://github.com/debauchee/barrier/issues/190
1. 网络问题，服务端和客户端必须要在一个局域网内，不能跨网段 启动服务端和客户端之后，可以通过barrier-&amp;gt;日志查看日志消息，根据错误提示判断问题类型
# windows cmd下可以通过下面的命令查看ip地址, 也可以通过图形界面右下角点击所连接网络（有线或者无线）的属性查看 ipconfig # linux下可以通过下面的命令查看ip地址 ip addr # 可以通过下面的命令检查客户端和服务器是否可以建立TCP连接 # 服务端起一个http服务器 python3 -m http.server 8000 # 客户端访问服务端的http服务器 nc -vz 服务器ip地址 8000 # 如果可以建立连接，会输出下面的信息 Connection to 服务器ip地址 8000 port [tcp/*] succeeded! 2. 服务端多IP问题 使用的时候需要在客户端输入服务端的IP地址才能连接，如果出现了多个网络接口的ip地址，往往是Virtual box或者VMware的虚拟网卡，需要去掉这些虚拟网卡(禁用相关的网络适配器即可)，只保留真实的网卡，需要注意的是服务端会显示若干个网络接口地址，加黑的ip地址需要和真正的网卡地址(也就是你正在用的局域网分配给你的地址)一致
可以在Windows上启动一个http服务器测试网络的连通性
# Windows python3 -m http.server 8000 # 然后在Linux上使用下面的命令查看是否可以访问 nc -vz 服务器ip地址 8000 3.</description>
    </item>
    
    <item>
      <title>python是如何查找标识符并对其赋值的</title>
      <link>https://mkx000.github.io/posts/python%E6%98%AF%E5%A6%82%E4%BD%95%E6%9F%A5%E6%89%BE%E5%8F%98%E9%87%8F%E5%B9%B6%E5%AF%B9%E5%85%B6%E8%B5%8B%E5%80%BC%E7%9A%84/</link>
      <pubDate>Fri, 28 Jul 2023 12:41:37 +0800</pubDate>
      
      <guid>https://mkx000.github.io/posts/python%E6%98%AF%E5%A6%82%E4%BD%95%E6%9F%A5%E6%89%BE%E5%8F%98%E9%87%8F%E5%B9%B6%E5%AF%B9%E5%85%B6%E8%B5%8B%E5%80%BC%E7%9A%84/</guid>
      <description>函数 The execution of a function introduces a new symbol table used for the local variables of the function. More precisely, all variable assignments in a function store the value in the local symbol table; whereas variable references first look in the local symbol table, then in the local symbol tables of enclosing functions, then in the global symbol table, and finally in the table of built-in names. Thus, global variables and variables of enclosing functions cannot be directly assigned a value within a function (unless, for global variables, named in a global statement, or, for variables of enclosing functions, named in a nonlocal statement), although they may be referenced.</description>
    </item>
    
    <item>
      <title>Intro to Python</title>
      <link>https://mkx000.github.io/posts/intro-to-python/</link>
      <pubDate>Tue, 25 Jul 2023 23:44:36 +0800</pubDate>
      
      <guid>https://mkx000.github.io/posts/intro-to-python/</guid>
      <description>Overivew python is a dynamic typing language&amp;hellip;
tips </description>
    </item>
    
    <item>
      <title>Langchain</title>
      <link>https://mkx000.github.io/posts/langchain-summmay/</link>
      <pubDate>Tue, 11 Jul 2023 11:37:02 +0800</pubDate>
      
      <guid>https://mkx000.github.io/posts/langchain-summmay/</guid>
      <description>关于langchain的一些总结和思考, 各类资源汇总</description>
    </item>
    
    <item>
      <title>LLM Powered Autonomous Agents</title>
      <link>https://mkx000.github.io/posts/%E7%AC%94%E8%AE%B0-llm-powered-agents/</link>
      <pubDate>Sat, 08 Jul 2023 16:56:49 +0800</pubDate>
      
      <guid>https://mkx000.github.io/posts/%E7%AC%94%E8%AE%B0-llm-powered-agents/</guid>
      <description>Overview 文章出处在这里
LLM powered autonomous agents: planning + memeoy + tool use
1. planning Chain of thought:
想法 prior work A: 可以通过产生用自然语言表达的中间步骤使得LLM获得更好的推理能力, techniques for arithmetic reasoning can benefit from generating natural language rationales that lead to the final answer。
缺点: 要想训练具有良好推理能力的大模型(或者fine-tune a pretrained model), 需要大量的高质量推理数据集, 成本太高, 远远超过简单的input-output pairs。
prior work B: 大模型已经可以通过prompt工程获得出色的少样本学习能力, large language models offer the exciting prospect of in-context few-shot learning via prompting. That is, instead of finetuning a separate language model checkpoint for each new task, one can simply “prompt” the model with a few input–output exemplars demonstrating the task</description>
    </item>
    
    <item>
      <title>Github Pages &#43; Hugo &#43; PaperMod搭建个人博客</title>
      <link>https://mkx000.github.io/posts/github-pages-&#43;-hugo-&#43;-papermod%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Sat, 08 Jul 2023 16:46:59 +0800</pubDate>
      
      <guid>https://mkx000.github.io/posts/github-pages-&#43;-hugo-&#43;-papermod%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</guid>
      <description>This post provides an overview of Hugo (PaperMod theme) and details the steps I took in setting up this website.</description>
    </item>
    
  </channel>
</rss>
